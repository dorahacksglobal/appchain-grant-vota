/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Uint128, QueryMsg, QueryMsg1, AdminListResp, MapOfUint128, Uint64 } from "./AppchainGrantVota.types";
export interface AppchainGrantVotaReadOnlyInterface {
  contractAddress: string;
  adminList: () => Promise<AdminListResp>;
  roundId: () => Promise<Uint64>;
  project: ({
    projectId,
    roundId
  }: {
    projectId: number;
    roundId: number;
  }) => Promise<MapOfUint128>;
  projectVoter: ({
    projectId,
    roundId,
    voter
  }: {
    projectId: number;
    roundId: number;
    voter: string;
  }) => Promise<MapOfUint128>;
}
export class AppchainGrantVotaQueryClient implements AppchainGrantVotaReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.adminList = this.adminList.bind(this);
    this.roundId = this.roundId.bind(this);
    this.project = this.project.bind(this);
    this.projectVoter = this.projectVoter.bind(this);
  }

  adminList = async (): Promise<AdminListResp> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin_list: {}
    });
  };
  roundId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      round_id: {}
    });
  };
  project = async ({
    projectId,
    roundId
  }: {
    projectId: number;
    roundId: number;
  }): Promise<MapOfUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      project: {
        project_id: projectId,
        round_id: roundId
      }
    });
  };
  projectVoter = async ({
    projectId,
    roundId,
    voter
  }: {
    projectId: number;
    roundId: number;
    voter: string;
  }): Promise<MapOfUint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      project_voter: {
        project_id: projectId,
        round_id: roundId,
        voter
      }
    });
  };
}
export interface AppchainGrantVotaInterface extends AppchainGrantVotaReadOnlyInterface {
  contractAddress: string;
  sender: string;
  addMember: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setBeneficiary: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  batchVote: ({
    amounts,
    projectIds
  }: {
    amounts: Uint128[];
    projectIds: number[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  endRound: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AppchainGrantVotaClient extends AppchainGrantVotaQueryClient implements AppchainGrantVotaInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.addMember = this.addMember.bind(this);
    this.setBeneficiary = this.setBeneficiary.bind(this);
    this.batchVote = this.batchVote.bind(this);
    this.endRound = this.endRound.bind(this);
  }

  addMember = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_member: {
        admin
      }
    }, fee, memo, _funds);
  };
  setBeneficiary = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_beneficiary: {
        address
      }
    }, fee, memo, _funds);
  };
  batchVote = async ({
    amounts,
    projectIds
  }: {
    amounts: Uint128[];
    projectIds: number[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      batch_vote: {
        amounts,
        project_ids: projectIds
      }
    }, fee, memo, _funds);
  };
  endRound = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      end_round: {}
    }, fee, memo, _funds);
  };
}